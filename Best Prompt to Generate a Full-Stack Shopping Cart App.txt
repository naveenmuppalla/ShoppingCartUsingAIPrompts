give me high-quality prompt to generate a full-stack Shopping Cart application using React.js (frontend), .NET Core (backend), and SQL Server (database)

Gemini Prompt to generate a shopping cart application using React Js, .NET core and SQL Server
----------------------------------------------------------------------------------------------

**Objective:** Generate a complete, full-stack e-commerce shopping cart application.

**Frontend (React.js):**
* **Technology Stack:** React.js with TypeScript, Vite for the build tool, and Tailwind CSS for styling. Use a component-based architecture with separate files for each component.
* **Key Features:**
    * A responsive **product listing page** that displays a grid of products with images, names, and prices.
    * A **shopping cart page** that shows a list of items added, with options to adjust quantity or remove items.
    * A **product details page** that displays a single product with a larger image, description, and an "Add to Cart" button.
    * Basic user authentication components (login/register).
    * A simple, clean UI with a modern aesthetic. 
* **API Integration:** The frontend must communicate with the .NET Core backend using a RESTful API. Use the `axios` library for API calls.

***

**Backend (.NET Core 8 Web API):**
* **Technology Stack:** .NET Core 8 Web API with C#. Use an API-first design.
* **Database:** SQL Server. Use Entity Framework Core for data access and migrations.
* **Key Features (API Endpoints):**
    * **Products:** GET `/api/products` to fetch all products. GET `/api/products/{id}` to get a single product.
    * **Shopping Cart:** POST `/api/cart/add` to add an item, POST `/api/cart/update` to change quantity, POST `/api/cart/remove` to remove an item.
    * **Authentication:** POST `/api/auth/register` and POST `/api/auth/login`. Use JWT (JSON Web Tokens) for authentication.
* **Architecture:** Implement a Clean Architecture or Repository Pattern to separate business logic from data access. Define clear DTOs (Data Transfer Objects) for all API responses.
* **Database Schema:** Generate the SQL Server schema for a `Products` table (Id, Name, Description, Price, ImageUrl) and a `ShoppingCartItems` table (Id, ProductId, UserId, Quantity).

***

**Specific Requirements:**
* **Error Handling:** Implement robust error handling on both the frontend and backend. The API should return meaningful HTTP status codes and error messages.
* **State Management:** Use the React Context API or Redux Toolkit for state management on the frontend.
* **Security:** Ensure the backend is secure with JWT authentication.
* **Boilerplate:** Generate all necessary boilerplate code, including project setup files (`package.json`, `.csproj`, etc.), `DbContext` for Entity Framework, and initial components.
* **Instructions:** Provide a `README.md` file with clear, step-by-step instructions on how to set up, build, and run both the frontend and backend of the application locally.

Microsoft Copilot Prompt to generate a shopping cart application using React Js, .NET core and SQL Server
----------------------------------------------------------------------------------------------------------
Generate a complete full-stack shopping cart web application using React.js for the frontend, .NET Core (C#) for the backend API, and SQL Server for the database. The application should include user authentication (login/register), product listing, product details, add-to-cart functionality, cart management (update quantity, remove items), and checkout flow. Use Entity Framework Core for ORM and implement RESTful API endpoints. The frontend should use React Router for navigation and Context API or Redux for state management. Include responsive design using CSS or a UI framework like Bootstrap or Tailwind. Seed the database with sample products and users. Ensure proper error handling, validation, and secure API practices. Provide clear folder structure and modular code organization for scalability.

ChatGPT Prompt to generate a shopping cart application using React Js, .NET core and SQL Server
------------------------------------------------------------------------------------------------
Build a full-stack shopping cart web application using the following technologies:

Frontend:
- React.js (latest version)
- Functional components with React Hooks
- React Router for navigation
- Context API or Redux Toolkit for state management
- Styled using Tailwind CSS (or plain CSS modules)

Backend:
- ASP.NET Core Web API (.NET 6 or later)
- Follows clean architecture principles (Controllers, Services, Repositories)
- JWT authentication for user login/register
- Proper error handling and validation (FluentValidation preferred)
- Swagger documentation enabled

Database:
- SQL Server
- Use Entity Framework Core for database interaction
- Include database migrations

Required Features:
1. User registration & login (JWT Auth)
2. Product listing page (pagination, sorting, search)
3. Product detail page
4. Shopping cart (add, remove, update quantity)
5. Checkout process (no payment gateway integration needed, just mock order placement)
6. Order history per user
7. Admin panel to:
   - Add/edit/delete products
   - View all orders

Project Structure:
- Modular code structure in both frontend and backend
- RESTful API design
- Separate folders for models, services, controllers, DTOs
- Include clear folder structure for React app (components, pages, services, etc.)

Output:
- Provide full backend code with startup configuration, routes, models, and EF setup
- Provide frontend code with routes, components, services, and state management
- Include README files for both projects with setup instructions

Ensure:
- The app is performant and secure
- The UI is responsive and clean
- Code is readable and maintainable

Optional Add-ons (Adjust Based on Your Needs)

You can modify or append depending on your goal:

Add: “Use TypeScript for React frontend.”

Add: “Include unit tests using xUnit (backend) and React Testing Library (frontend).”

Add: “Deployable using Docker and Docker Compose.”

Add: “Support internationalization (i18n) in frontend.”